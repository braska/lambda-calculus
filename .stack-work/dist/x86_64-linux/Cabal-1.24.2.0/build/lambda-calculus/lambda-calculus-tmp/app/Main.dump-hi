
==================== FINAL INTERFACE ====================
2017-11-10 20:53:03.630473584 UTC

interface main@main:Main 8002
  interface hash: 21d3554ccbb0f92b56d30d119dcb05cd
  ABI hash: 384b517a52513e8aacd33bbf062429a0
  export-list hash: 2db0bf99965613b97c732bbab32616ed
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d29d430aa7ce376dd362207a92ccfef7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      lambda-calculus-0.1.0.0@lambda-calculus-0.1.0.0-71ACHzEMgLIBMHG57ZzwZM
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  lambda-calculus-0.1.0.0@lambda-calculus-0.1.0.0-71ACHzEMgLIBMHG57ZzwZM:Lib 114bc0735e1e27d1e71114ba1e8e1736
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
70dc1cfe1d936fe6ca4ca26d0dfb1be3
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f56d6b64915fe5009998aa012da5cb58
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Base.++
                      @ GHC.Types.Char
                      Data.Either.$fShowEither3
                      (Lib.$w$cshowsPrec1
                         11#
                         (Lib.$wlastUnf
                            @ Lib.TermI
                            10000#
                            Lib.betaI
                            (case Text.Read.readEither6
                                    @ Lib.TermP
                                    (Text.ParserCombinators.ReadP.run
                                       @ Lib.TermP
                                       Main.main2
                                       ipv1) of wild {
                               []
                               -> case GHC.Err.error
                                         @ 'GHC.Types.PtrRepLifted
                                         @ Lib.TermP
                                         GHC.Err.errorWithoutStackTrace_wild1
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                         Text.Read.readEither4
                                  ret_ty Lib.TermI
                                  of {}
                               : x ds1
                               -> case ds1 of wild1 {
                                    []
                                    -> case x of wild2 {
                                         DEFAULT -> case Lib.solve1 ret_ty Lib.TermI of {}
                                         Lib.TermP term
                                         -> Lib.toTermI' term (GHC.Types.[] @ Lib.Symbol) }
                                    : ipv2 ipv3
                                    -> case GHC.Err.error
                                              @ 'GHC.Types.PtrRepLifted
                                              @ Lib.TermP
                                              GHC.Err.errorWithoutStackTrace_wild1
                                                `cast`
                                              (Sym (GHC.Classes.N:IP[0]
                                                        <"callStack">_N
                                                        <GHC.Stack.Types.CallStack>_N))
                                              Text.Read.readEither2
                                       ret_ty Lib.TermI
                                       of {} } }))
                         (GHC.Types.[] @ GHC.Types.Char)))
                   GHC.Types.True
                   ipv }) -}
11e670730795206c48b04359932c5c84
  main2 :: Text.ParserCombinators.ReadP.P Lib.TermP
  {- Unfolding: ((GHC.Read.parens1
                    @ Lib.TermP
                    Lib.$fReadTermP3
                      `cast`
                    (Trans
                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                          ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermP>_R))
                         (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                   <Lib.TermP>_R)))
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermP>_R)
                   @ Lib.TermP
                   (Text.Read.readEither5 @ Lib.TermP)) -}
d6c34187c2079565dfec22783e1acd2e
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

