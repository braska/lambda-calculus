
==================== FINAL INTERFACE ====================
2017-11-10 14:57:17.93417802 UTC

interface main@main:Main 8002
  interface hash: 33c7afbedb6f3140ba003f06f472d4a3
  ABI hash: 3c8ffa6df33362ffc301f182234e68b6
  export-list hash: 155f787743f4b4db2df2cd141b18da02
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 30e0a1549632cb93a230fdd9b2db9593
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.app
  Main.betaI
  Main.full
  Main.lam
  Main.main
  Main.solve
  Main.sym
  Main.toTermI
  Main.toTermS
  Main.Symbol{Main.Symbol unSymbol}
  Main.TermI{Main.AppI Main.LamI Main.SymI}
  Main.TermP{Main.And Main.Boolean Main.Cons Main.Divide Main.Fst Main.Head Main.Iff Main.IsNil Main.Minus Main.Mult Main.Natural Main.Nil Main.Not Main.Or Main.Pair Main.Plus Main.Snd Main.Tail Main.TermP Main.Y}
  Main.TermS{Main.AppS Main.LamS Main.SymS}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
1dd0e0ce693562172f2769ed83436996
  $fEqSymbol :: GHC.Classes.Eq Main.Symbol
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Symbol Main.$fEqSymbol_$c== Main.$fEqSymbol_$c/= -}
1dd0e0ce693562172f2769ed83436996
  $fEqSymbol_$c/= :: Main.Symbol -> Main.Symbol -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c/=1
                  `cast`
                (Sym (Main.N:Symbol[0])
                 ->_R Sym (Main.N:Symbol[0])
                 ->_R <GHC.Types.Bool>_R) -}
1dd0e0ce693562172f2769ed83436996
  $fEqSymbol_$c== :: Main.Symbol -> Main.Symbol -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.eqString
                  `cast`
                (Sym (Main.N:Symbol[0])
                 ->_R Sym (Main.N:Symbol[0])
                 ->_R <GHC.Types.Bool>_R) -}
43f8c24b079cfcfa297035b61c28457a
  $fEqTermI :: GHC.Classes.Eq Main.TermI
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermI Main.$fEqTermI_$c== Main.$fEqTermI_$c/= -}
43f8c24b079cfcfa297035b61c28457a
  $fEqTermI_$c/= :: Main.TermI -> Main.TermI -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.TermI) (b :: Main.TermI) ->
                 case Main.$fEqTermI_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
43f8c24b079cfcfa297035b61c28457a
  $fEqTermI_$c== :: Main.TermI -> Main.TermI -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
aa8de0d08df2c18bf93516ae945a81b8
  $fEqTermP :: GHC.Classes.Eq Main.TermP
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermP Main.$fEqTermP_$c== Main.$fEqTermP_$c/= -}
aa8de0d08df2c18bf93516ae945a81b8
  $fEqTermP_$c/= :: Main.TermP -> Main.TermP -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.TermP) (b :: Main.TermP) ->
                 case Main.$fEqTermP_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fEqTermP_$c== :: Main.TermP -> Main.TermP -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ef04bad59ad41c6e12fb2873fc78863d
  $fEqTermS :: GHC.Classes.Eq Main.TermS
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermS Main.$fEqTermS_$c== Main.$fEqTermS_$c/= -}
ef04bad59ad41c6e12fb2873fc78863d
  $fEqTermS_$c/= :: Main.TermS -> Main.TermS -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.TermS) (b :: Main.TermS) ->
                 case Main.$fEqTermS_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fEqTermS_$c== :: Main.TermS -> Main.TermS -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol :: GHC.Read.Read Main.Symbol
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Symbol
                  Main.$fReadSymbol_$creadsPrec
                  Main.$fReadSymbol_$creadList
                  Main.$fReadSymbol_$creadPrec
                  Main.$fReadSymbol_$creadListPrec -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Main.Symbol] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Main.Symbol] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Main.Symbol
                   Main.$fReadSymbol2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.Symbol>_R))
                   eta
                   @ b
                   eta1) -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Main.Symbol
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Main.Symbol
                   Main.$fReadSymbol3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.Symbol>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Main.Symbol>_R)))) -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Main.Symbol -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Main.Symbol -> Text.ParserCombinators.ReadP.P b) ->
                 case c of wild { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 11#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> Main.$fReadSymbol5 Main.$fReadSymbol4 @ b eta } }) -}
34f87b7a1c5ef94de760ef4468e1f18d
  $fReadSymbol4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11#) -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       (Main.Symbol -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b1
                   (w1 :: Main.Symbol -> Text.ParserCombinators.ReadP.P b1) ->
                 case Main.$w$creadPrec @ b1 w1 of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b1 ww1 }) -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol6 :: Text.ParserCombinators.ReadP.P [Main.Symbol]
  {- Unfolding: (GHC.Read.list1
                   @ Main.Symbol
                   Main.$fReadSymbol2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.Symbol>_R))
                   GHC.Read.$fRead()5
                   @ [Main.Symbol]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Main.Symbol])) -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Main.Symbol]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Main.Symbol]
                   Main.$fReadSymbol6) -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Main.Symbol]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadSymbol1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Main.Symbol]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Main.Symbol]>_R))) -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Main.Symbol
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadSymbol2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Main.Symbol>_R)) -}
1dd0e0ce693562172f2769ed83436996
  $fReadSymbol_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Main.Symbol
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Main.Symbol
                   ((GHC.Read.parens1
                       @ Main.Symbol
                       Main.$fReadSymbol3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.Symbol>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Main.Symbol>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.Symbol>_R)
                      @ Main.Symbol
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Main.Symbol))) -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI :: GHC.Read.Read Main.TermI
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermI
                  Main.$fReadTermI_$creadsPrec
                  Main.$fReadTermI_$creadList
                  Main.$fReadTermI_$creadPrec
                  Main.$fReadTermI_$creadListPrec -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Main.TermI] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Main.TermI] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Main.TermI
                   Main.$fReadTermI2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.TermI>_R))
                   eta
                   @ b
                   eta1) -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Main.TermI
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Main.TermI
                   Main.$fReadTermI3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermI>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Main.TermI>_R)))) -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Main.TermI -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Main.TermI -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$creadPrec1 ww1 @ b w1 }) -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI4 :: Text.ParserCombinators.ReadP.P [Main.TermI]
  {- Unfolding: (GHC.Read.list1
                   @ Main.TermI
                   Main.$fReadTermI2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.TermI>_R))
                   GHC.Read.$fRead()5
                   @ [Main.TermI]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Main.TermI])) -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Main.TermI]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Main.TermI]
                   Main.$fReadTermI4) -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Main.TermI]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadTermI1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Main.TermI]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Main.TermI]>_R))) -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Main.TermI
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadTermI2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Main.TermI>_R)) -}
43f8c24b079cfcfa297035b61c28457a
  $fReadTermI_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Main.TermI
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Main.TermI
                   ((GHC.Read.parens1
                       @ Main.TermI
                       Main.$fReadTermI3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermI>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Main.TermI>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermI>_R)
                      @ Main.TermI
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Main.TermI))) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP :: GHC.Read.Read Main.TermP
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermP
                  Main.$fReadTermP_$creadsPrec
                  Main.$fReadTermP_$creadList
                  Main.$fReadTermP_$creadPrec
                  Main.$fReadTermP_$creadListPrec -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Main.TermP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Main.TermP] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Main.TermP
                   Main.$fReadTermP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.TermP>_R))
                   eta
                   @ b
                   eta1) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Main.TermP
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Main.TermP
                   Main.$fReadTermP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Main.TermP>_R)))) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Main.TermP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP4 :: Text.ParserCombinators.ReadP.P [Main.TermP]
  {- Unfolding: (GHC.Read.list1
                   @ Main.TermP
                   Main.$fReadTermP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.TermP>_R))
                   GHC.Read.$fRead()5
                   @ [Main.TermP]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Main.TermP])) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Main.TermP]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Main.TermP]
                   Main.$fReadTermP4) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Main.TermP]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadTermP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Main.TermP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Main.TermP]>_R))) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Main.TermP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadTermP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Main.TermP>_R)) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fReadTermP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Main.TermP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Main.TermP
                   ((GHC.Read.parens1
                       @ Main.TermP
                       Main.$fReadTermP3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Main.TermP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermP>_R)
                      @ Main.TermP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Main.TermP))) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS :: GHC.Read.Read Main.TermS
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermS
                  Main.$fReadTermS_$creadsPrec
                  Main.$fReadTermS_$creadList
                  Main.$fReadTermS_$creadPrec
                  Main.$fReadTermS_$creadListPrec -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Main.TermS] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Main.TermS] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Main.TermS
                   Main.$fReadTermS2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.TermS>_R))
                   eta
                   @ b
                   eta1) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Main.TermS
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Main.TermS
                   Main.$fReadTermS3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermS>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Main.TermS>_R)))) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Main.TermS -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Main.TermS -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$creadPrec2 ww1 @ b w1 }) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS4 :: Text.ParserCombinators.ReadP.P [Main.TermS]
  {- Unfolding: (GHC.Read.list1
                   @ Main.TermS
                   Main.$fReadTermS2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.TermS>_R))
                   GHC.Read.$fRead()5
                   @ [Main.TermS]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Main.TermS])) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Main.TermS]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Main.TermS]
                   Main.$fReadTermS4) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Main.TermS]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadTermS1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Main.TermS]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Main.TermS]>_R))) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Main.TermS
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadTermS2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Main.TermS>_R)) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fReadTermS_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Main.TermS
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Main.TermS
                   ((GHC.Read.parens1
                       @ Main.TermS
                       Main.$fReadTermS3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermS>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Main.TermS>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.TermS>_R)
                      @ Main.TermS
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Main.TermS))) -}
1dd0e0ce693562172f2769ed83436996
  $fShowSymbol :: GHC.Show.Show Main.Symbol
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Symbol
                  Main.$fShowSymbol_$cshowsPrec
                  Main.$fShowSymbol_$cshow
                  Main.$fShowSymbol_$cshowList -}
1dd0e0ce693562172f2769ed83436996
  $fShowSymbol1 :: Main.Symbol -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Symbol) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec 0# w w1) -}
310210e9f46eba42d09062cc1cd0f174
  $fShowSymbol2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
c3d1985a7296bbd7a2e07ee274bf3cd8
  $fShowSymbol3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unSymbol = "#) -}
73bddf61ae293a0b7a7de9f4b4b632d7
  $fShowSymbol4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Symbol {"#) -}
1dd0e0ce693562172f2769ed83436996
  $fShowSymbol_$cshow :: Main.Symbol -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Symbol) ->
                 Main.$fShowSymbol_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1dd0e0ce693562172f2769ed83436996
  $fShowSymbol_$cshowList :: [Main.Symbol] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Symbol
                   Main.$fShowSymbol1) -}
1dd0e0ce693562172f2769ed83436996
  $fShowSymbol_$cshowsPrec ::
    GHC.Types.Int -> Main.Symbol -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Symbol)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
43f8c24b079cfcfa297035b61c28457a
  $fShowTermI :: GHC.Show.Show Main.TermI
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermI
                  Main.$fShowTermI_$cshowsPrec
                  Main.$fShowTermI_$cshow
                  Main.$fShowTermI_$cshowList -}
43f8c24b079cfcfa297035b61c28457a
  $fShowTermI1 :: Main.TermI -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.TermI) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec1 0# w w1) -}
43f8c24b079cfcfa297035b61c28457a
  $fShowTermI_$cshow :: Main.TermI -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.TermI) ->
                 Main.$fShowTermI_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
43f8c24b079cfcfa297035b61c28457a
  $fShowTermI_$cshowList :: [Main.TermI] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.TermI Main.$fShowTermI1) -}
43f8c24b079cfcfa297035b61c28457a
  $fShowTermI_$cshowsPrec ::
    GHC.Types.Int -> Main.TermI -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.TermI)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec1 ww1 w1 w2 }) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fShowTermP :: GHC.Show.Show Main.TermP
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermP
                  Main.$fShowTermP_$cshowsPrec
                  Main.$fShowTermP_$cshow
                  Main.$fShowTermP_$cshowList -}
aa8de0d08df2c18bf93516ae945a81b8
  $fShowTermP1 :: Main.TermP -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowTermP_$cshowsPrec Main.$fShowTermP2) -}
f508180e92532b6bfaf8e66211d18ea1
  $fShowTermP2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fShowTermP_$cshow :: Main.TermP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.TermP) ->
                 Main.$fShowTermP_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fShowTermP_$cshowList :: [Main.TermP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.TermP Main.$fShowTermP1) -}
aa8de0d08df2c18bf93516ae945a81b8
  $fShowTermP_$cshowsPrec ::
    GHC.Types.Int -> Main.TermP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
ef04bad59ad41c6e12fb2873fc78863d
  $fShowTermS :: GHC.Show.Show Main.TermS
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.TermS
                  Main.$fShowTermS_$cshowsPrec
                  Main.$fShowTermS_$cshow
                  Main.$fShowTermS_$cshowList -}
ef04bad59ad41c6e12fb2873fc78863d
  $fShowTermS1 :: Main.TermS -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.TermS) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec2 0# w w1) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fShowTermS_$cshow :: Main.TermS -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.TermS) ->
                 Main.$fShowTermS_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fShowTermS_$cshowList :: [Main.TermS] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.TermS Main.$fShowTermS1) -}
ef04bad59ad41c6e12fb2873fc78863d
  $fShowTermS_$cshowsPrec ::
    GHC.Types.Int -> Main.TermS -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.TermS)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec2 ww1 w1 w2 }) -}
10732c0a5a5e09f2adb4ad736c9e83c3
  $tc'And :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17291780660894424009##
                   14568232260972065040##
                   Main.$trModule
                   Main.$tc'And1) -}
1eafc3984a7283cc212dd7417c7c7b3c
  $tc'And1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'And"#) -}
31d1fb4db25f0fe0f769611c8bba11bf
  $tc'AppI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17360124425912982008##
                   11783425771936398610##
                   Main.$trModule
                   Main.$tc'AppI1) -}
7ba0b0b0c654d50c05b22e509ae6083c
  $tc'AppI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AppI"#) -}
4b9f58ef4aa19fae0f619d43e2ff779e
  $tc'AppS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13509702992391327240##
                   3648516158805788723##
                   Main.$trModule
                   Main.$tc'AppS1) -}
6b6364db96c4a4b4aed111b9607a6275
  $tc'AppS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AppS"#) -}
f97c11d0177926a55b0fc361a7ecc92e
  $tc'Boolean :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7941187407706738888##
                   14901292139913479026##
                   Main.$trModule
                   Main.$tc'Boolean1) -}
53eafacb8046ffbbb6bca21317971128
  $tc'Boolean1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Boolean"#) -}
f38d1420a1d8c5db33f7d4f4242d5b32
  $tc'Cons :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18207026349337875767##
                   15163872925107883080##
                   Main.$trModule
                   Main.$tc'Cons1) -}
4836798365e525a94e4e82d1915e5530
  $tc'Cons1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cons"#) -}
455c0aaf10df604e7bde14993de97615
  $tc'Divide :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3214693580804975150##
                   7262981431806344614##
                   Main.$trModule
                   Main.$tc'Divide1) -}
6c156201ea3bf1a189e7656ccfe713ac
  $tc'Divide1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Divide"#) -}
3bd01df171441ee986c267f82f5598ea
  $tc'Fst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9940562695922315467##
                   3034498016122410373##
                   Main.$trModule
                   Main.$tc'Fst1) -}
92ca7969e88ea5e498769dd7780e5f33
  $tc'Fst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fst"#) -}
f18258859769afe2e9e1b47052d0d311
  $tc'Head :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11313679506918468289##
                   14520017284244519086##
                   Main.$trModule
                   Main.$tc'Head1) -}
00d59bac7814befeeb7430f6f10794ce
  $tc'Head1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Head"#) -}
fe8a92eb9f936140fb82a3670b624630
  $tc'Iff :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16749393579134100988##
                   11776293960898447139##
                   Main.$trModule
                   Main.$tc'Iff1) -}
ebfd1a7bb20dc2c76e139d0f1e98d75b
  $tc'Iff1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Iff"#) -}
ca7a5948d10bb6f574f9154f35bd56ed
  $tc'IsNil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1190028674732051180##
                   8131176936520724462##
                   Main.$trModule
                   Main.$tc'IsNil1) -}
ff0d1aaf8a983667e81efc77b5676cd3
  $tc'IsNil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IsNil"#) -}
0bfc8907e76ca9eb21648ed14cffb353
  $tc'LamI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   389315361618108231##
                   14807644548444849530##
                   Main.$trModule
                   Main.$tc'LamI1) -}
1614c5f203f3fff923afc5642f79e169
  $tc'LamI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LamI"#) -}
5c12ceb90b9bdf293892f83c788cf847
  $tc'LamS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3653065767041165970##
                   18088194264901299416##
                   Main.$trModule
                   Main.$tc'LamS1) -}
fe2f515a0ee921fef273f045a8f408c2
  $tc'LamS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LamS"#) -}
d4635441949e6bde611e6512348e0dfd
  $tc'Minus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16304850971349419080##
                   14025851798255747861##
                   Main.$trModule
                   Main.$tc'Minus1) -}
ba1df3ff9634b263162c81405d3f8a33
  $tc'Minus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Minus"#) -}
4454fb8c2c5e84811810a8e13852dcc1
  $tc'Mult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14628342681922343940##
                   10137879016032530467##
                   Main.$trModule
                   Main.$tc'Mult1) -}
9d17eeb5bebd6a2a3c168427318439f1
  $tc'Mult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mult"#) -}
7bbb618de72087121030ebc3d21aff7e
  $tc'Natural :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9347289423200233697##
                   7946357042708200366##
                   Main.$trModule
                   Main.$tc'Natural1) -}
aee020545ba4745d37a78e640ebe0e71
  $tc'Natural1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Natural"#) -}
4eb8463987c4300e2bf0c8b531d53f49
  $tc'Nil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16673662833419711035##
                   7628056425835309196##
                   Main.$trModule
                   Main.$tc'Nil1) -}
aec22d6bf6b9e827a827e1622c6abc2a
  $tc'Nil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nil"#) -}
f25ed2bd48a5cc6ee518308cd21fc2f4
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10262426599607641876##
                   13586756233866363492##
                   Main.$trModule
                   Main.$tc'Not1) -}
7a681648c7513fb0fb5a71f3b2e18294
  $tc'Not1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Not"#) -}
140946aa398e34a5d6eb00ffc7a5b8e4
  $tc'Or :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8735710369588746287##
                   18212651871034449708##
                   Main.$trModule
                   Main.$tc'Or1) -}
575b9cd7fd5b1ece0c702931ca9fc463
  $tc'Or1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Or"#) -}
11c32fde49fbe1e6ceea6e9c64326c57
  $tc'Pair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10224448114034803930##
                   7506890485268976573##
                   Main.$trModule
                   Main.$tc'Pair1) -}
5668b12f6bf0be23795a6244320a2c88
  $tc'Pair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pair"#) -}
0c9a3d50fddfa84054bc52d5979cac21
  $tc'Plus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7397075560478054559##
                   12698746895088437352##
                   Main.$trModule
                   Main.$tc'Plus1) -}
23cb143bd9e6bb17a56f0282ce7f3348
  $tc'Plus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Plus"#) -}
af54adfe7c6dd4761da8a21827b3f2c2
  $tc'Snd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17662878918028070823##
                   4669493353677054090##
                   Main.$trModule
                   Main.$tc'Snd1) -}
6d4fa7ec7474ebe6c1af8e67dd597a03
  $tc'Snd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Snd"#) -}
dcde9566969151af1f00d736c8056940
  $tc'SymI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9610296516199090304##
                   7683898684315320972##
                   Main.$trModule
                   Main.$tc'SymI1) -}
97b6bbab515a3bab8be619d28c59421e
  $tc'SymI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SymI"#) -}
9ce38ab827a7577724cdf1a50757f75b
  $tc'SymS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11635752859979653224##
                   7300884148350279820##
                   Main.$trModule
                   Main.$tc'SymS1) -}
d434aefcd89c2a23052c24119398f32b
  $tc'SymS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SymS"#) -}
69fe68eadc79edbd79359c472a2b44a9
  $tc'Symbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6100031322145669715##
                   10781039084337425456##
                   Main.$trModule
                   Main.$tc'Symbol1) -}
52862407cc79a4ff5d5f8824b587b878
  $tc'Symbol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Symbol"#) -}
eae0f4bc0767890b02fcf40fa02d4672
  $tc'Tail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   788344078385133271##
                   2197682816151475298##
                   Main.$trModule
                   Main.$tc'Tail1) -}
5950909aacfc26954657f08b11bb0fee
  $tc'Tail1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tail"#) -}
e5994506b439b01baef31a876714bb0b
  $tc'TermP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13329543675111772455##
                   12522758500877294278##
                   Main.$trModule
                   Main.$tc'TermP1) -}
56c8e5f7d6c088ddca797b6d5e3ed230
  $tc'TermP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TermP"#) -}
c17d69b4872d59398253fdae9074efb6
  $tc'Y :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13522334594837327854##
                   11975102422634911111##
                   Main.$trModule
                   Main.$tc'Y1) -}
229084bc999fe8200f41add0d3b4e1c0
  $tc'Y1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Y"#) -}
8341abf3f990f7bc6dbf9ab2eeb5d29a
  $tcSymbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2595366593487484315##
                   17662735857710607947##
                   Main.$trModule
                   Main.$tcSymbol1) -}
6233e8802bb26e75d7c927838a0d9f78
  $tcSymbol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Symbol"#) -}
7737f78cdb3aad98c8c35a6f4cafabc6
  $tcTermI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14648055551141594545##
                   14943113135588178294##
                   Main.$trModule
                   Main.$tcTermI1) -}
e7df89504e1d6a385f10e01294a0606a
  $tcTermI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TermI"#) -}
163aadb78f1934e477702a5783120695
  $tcTermP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11561708333493605325##
                   6841390091678172860##
                   Main.$trModule
                   Main.$tcTermP1) -}
c7604c0ef5d108bcb0d3163135980e86
  $tcTermP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TermP"#) -}
cdb307883b15a1288f772d9471e646ba
  $tcTermS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9205303791379426781##
                   12652971425282160338##
                   Main.$trModule
                   Main.$tcTermS1) -}
e330752430840ac324da769345353718
  $tcTermS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TermS"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
1dd0e0ce693562172f2769ed83436996
  $w$creadPrec ::
    (Main.Symbol -> Text.ParserCombinators.ReadP.P b1)
    -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
43f8c24b079cfcfa297035b61c28457a
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (Main.TermI -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
ef04bad59ad41c6e12fb2873fc78863d
  $w$creadPrec2 ::
    GHC.Prim.Int#
    -> forall b.
       (Main.TermS -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
1dd0e0ce693562172f2769ed83436996
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.Symbol -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.Symbol)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowSymbol4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowSymbol3
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                w `cast` (Main.N:Symbol[0])
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++ @ GHC.Types.Char Main.$fShowSymbol2 x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
43f8c24b079cfcfa297035b61c28457a
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Main.TermI -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
ef04bad59ad41c6e12fb2873fc78863d
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> Main.TermS -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
e158673e6cf07f45430216490acb5578
  $wlastUnf :: GHC.Prim.Int# -> (a -> GHC.Base.Maybe a) -> a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U>,
     Inline: [0] -}
1dd0e0ce693562172f2769ed83436996
  newtype Symbol = Symbol {unSymbol :: GHC.Base.String}
43f8c24b079cfcfa297035b61c28457a
  data TermI
    = SymI GHC.Types.Int | LamI Main.TermI | AppI Main.TermI Main.TermI
aa8de0d08df2c18bf93516ae945a81b8
  data TermP
    = TermP Main.TermS
    | Boolean GHC.Types.Bool
    | Iff Main.TermP Main.TermP Main.TermP
    | Not Main.TermP
    | And Main.TermP Main.TermP
    | Or Main.TermP Main.TermP
    | Natural GHC.Types.Int
    | Plus Main.TermP Main.TermP
    | Mult Main.TermP Main.TermP
    | Minus Main.TermP Main.TermP
    | Divide Main.TermP Main.TermP
    | Y Main.TermP
    | Pair Main.TermP Main.TermP
    | Fst Main.TermP
    | Snd Main.TermP
    | Cons Main.TermP Main.TermP
    | Nil
    | IsNil Main.TermP
    | Head Main.TermP
    | Tail Main.TermP
ef04bad59ad41c6e12fb2873fc78863d
  data TermS
    = SymS Main.Symbol
    | LamS Main.Symbol Main.TermS
    | AppS Main.TermS Main.TermS
5e3ab66e5c529ac7d6948d57f69d3f74
  app :: Main.TermS -> Main.TermS -> Main.TermS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True) Main.AppS -}
deeacaa6805f6ae1987a1980b17cf7c0
  betaI :: Main.TermI -> GHC.Base.Maybe Main.TermI
  {- Strictness: x -}
fd3d0412997e7d6cf84238de1a4634ad
  full ::
    (Main.TermS -> a) -> (a -> GHC.Base.Maybe a) -> Main.TermS -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,C(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (a1 :: Main.TermS -> a)
                   (b :: a -> GHC.Base.Maybe a)
                   (term :: Main.TermS) ->
                 Main.full_lastUnf @ a Main.full1 b (a1 term)) -}
85f34e07979c5f3c731c54bdf2edb5b3
  full1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10000#) -}
272125faa96db6d9b047e4dc59889f2f
  full_lastUnf :: GHC.Types.Int -> (a -> GHC.Base.Maybe a) -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><L,C(U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: a -> GHC.Base.Maybe a)
                   (w2 :: a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wlastUnf @ a ww1 w1 w2 }) -}
a3d56abc8d34cd78b2722d9fe47af60a
  lam :: GHC.Base.String -> Main.TermS -> Main.TermS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Main.LamS
                  `cast`
                (Main.N:Symbol[0] ->_R <Main.TermS -> Main.TermS>_R) -}
384a0d14154f47aaa64806ee96441aff
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
a615ed2384fe1b3a7993a0f6820cae7c
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv }) -}
0c6cc04ef84b7713687310e02f6b5c4d
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Data.Either.$fShowEither3
                   Main.main3) -}
825e9524e35cb31dcbc5586e1f7cd01d
  main3 :: GHC.Base.String
  {- Unfolding: (Main.$w$cshowsPrec1
                   11#
                   Main.main4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1d227dce44c0685385f231697ca18fe2
  main4 :: Main.TermI
  {- Unfolding: (Main.$wlastUnf
                   @ Main.TermI
                   10000#
                   Main.betaI
                   (case Main.toTermI ret_ty Main.TermI of {})) -}
27b9a71c6c42102908327e7bc05a8916
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
839eff1b59691ed1704aad4f96d189bc
  solve :: Main.TermP -> Data.Either.Either Main.TermI Main.TermS
  {- Arity: 1, Strictness: <L,A>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.TermP) ->
                 Data.Either.Left
                   @ Main.TermI
                   @ Main.TermS
                   (Main.$wlastUnf
                      @ Main.TermI
                      10000#
                      Main.betaI
                      (case Main.toTermI ret_ty Main.TermI of {}))) -}
d9baa968d26538f09aa7811dd208ecc7
  sym :: GHC.Base.String -> Main.TermS
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True)
                Main.SymS `cast` (Main.N:Symbol[0] ->_R <Main.TermS>_R) -}
c8ce37443da0ef2c735520580c2dd5d3
  toTermI :: Main.TermS -> Main.TermI
  {- Strictness: x -}
9e1ff1ae201c4d0cfa2c240fe5dad634
  toTermS :: Main.TermP -> Main.TermS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.TermP) ->
                 case ds of wild {
                   DEFAULT -> Main.toTermS1 Main.TermP term -> term }) -}
745e55343c35e5c47ba64f64146531dc
  toTermS1 :: Main.TermS
  {- Strictness: x -}
ca0f5e3336109a9fd60f9cb75ff04fbb
  unSymbol :: Main.Symbol -> GHC.Base.String
  RecSel Left Main.Symbol
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Main.unSymbol1 `cast` (<Main.Symbol>_R ->_R Main.N:Symbol[0]) -}
d8d2c84cf0ea132d2b62b1f311bf44d7
  unSymbol1 :: Main.Symbol -> Main.Symbol
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Main.Symbol) -> ds) -}
instance [safe] GHC.Classes.Eq [Main.Symbol] = Main.$fEqSymbol
instance [safe] GHC.Classes.Eq [Main.TermI] = Main.$fEqTermI
instance [safe] GHC.Classes.Eq [Main.TermP] = Main.$fEqTermP
instance [safe] GHC.Classes.Eq [Main.TermS] = Main.$fEqTermS
instance [safe] GHC.Read.Read [Main.Symbol] = Main.$fReadSymbol
instance [safe] GHC.Read.Read [Main.TermI] = Main.$fReadTermI
instance [safe] GHC.Read.Read [Main.TermP] = Main.$fReadTermP
instance [safe] GHC.Read.Read [Main.TermS] = Main.$fReadTermS
instance [safe] GHC.Show.Show [Main.Symbol] = Main.$fShowSymbol
instance [safe] GHC.Show.Show [Main.TermI] = Main.$fShowTermI
instance [safe] GHC.Show.Show [Main.TermP] = Main.$fShowTermP
instance [safe] GHC.Show.Show [Main.TermS] = Main.$fShowTermS
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

