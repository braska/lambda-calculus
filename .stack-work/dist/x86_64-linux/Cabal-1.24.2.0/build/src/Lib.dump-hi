
==================== FINAL INTERFACE ====================
2017-11-10 20:52:47.885932735 UTC

interface lambda-calculus-0.1.0.0-71ACHzEMgLIBMHG57ZzwZM:Lib 8002
  interface hash: 95f29a23dde714999b759bc23189d47a
  ABI hash: 114bc0735e1e27d1e71114ba1e8e1736
  export-list hash: 6a1b4ed319014cc336e2f9b531e656be
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.app
  Lib.betaI
  Lib.doApp
  Lib.doApp'
  Lib.full
  Lib.lam
  Lib.recalcDistances
  Lib.solve
  Lib.staticDistance
  Lib.sym
  Lib.toTermI
  Lib.toTermI'
  Lib.toTermS
  Lib.Symbol{Lib.Symbol unSymbol}
  Lib.TermI{Lib.AppI Lib.LamI Lib.SymI}
  Lib.TermP{Lib.And Lib.Boolean Lib.Cons Lib.Divide Lib.Fst Lib.Head Lib.Iff Lib.IsNil Lib.Minus Lib.Mult Lib.Natural Lib.Nil Lib.Not Lib.Or Lib.Pair Lib.Plus Lib.Snd Lib.Tail Lib.TermP Lib.Y}
  Lib.TermS{Lib.AppS Lib.LamS Lib.SymS}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
1a4a7c51ca3c789468935b68851dddcb
  $fEqSymbol :: GHC.Classes.Eq Lib.Symbol
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Symbol Lib.$fEqSymbol_$c== Lib.$fEqSymbol_$c/= -}
1a4a7c51ca3c789468935b68851dddcb
  $fEqSymbol_$c/= :: Lib.Symbol -> Lib.Symbol -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$c/=1
                  `cast`
                (Sym (Lib.N:Symbol[0])
                 ->_R Sym (Lib.N:Symbol[0])
                 ->_R <GHC.Types.Bool>_R) -}
1a4a7c51ca3c789468935b68851dddcb
  $fEqSymbol_$c== :: Lib.Symbol -> Lib.Symbol -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.eqString
                  `cast`
                (Sym (Lib.N:Symbol[0])
                 ->_R Sym (Lib.N:Symbol[0])
                 ->_R <GHC.Types.Bool>_R) -}
05114d183ea8d376753b1082c2b6d1e3
  $fEqTermI :: GHC.Classes.Eq Lib.TermI
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermI Lib.$fEqTermI_$c== Lib.$fEqTermI_$c/= -}
05114d183ea8d376753b1082c2b6d1e3
  $fEqTermI_$c/= :: Lib.TermI -> Lib.TermI -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.TermI) (b :: Lib.TermI) ->
                 case Lib.$fEqTermI_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
05114d183ea8d376753b1082c2b6d1e3
  $fEqTermI_$c== :: Lib.TermI -> Lib.TermI -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b09eada1e179dc4af0a0a61f75291906
  $fEqTermP :: GHC.Classes.Eq Lib.TermP
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermP Lib.$fEqTermP_$c== Lib.$fEqTermP_$c/= -}
b09eada1e179dc4af0a0a61f75291906
  $fEqTermP_$c/= :: Lib.TermP -> Lib.TermP -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.TermP) (b :: Lib.TermP) ->
                 case Lib.$fEqTermP_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b09eada1e179dc4af0a0a61f75291906
  $fEqTermP_$c== :: Lib.TermP -> Lib.TermP -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
477679833f1ea120639b8e599bb54302
  $fEqTermS :: GHC.Classes.Eq Lib.TermS
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermS Lib.$fEqTermS_$c== Lib.$fEqTermS_$c/= -}
477679833f1ea120639b8e599bb54302
  $fEqTermS_$c/= :: Lib.TermS -> Lib.TermS -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.TermS) (b :: Lib.TermS) ->
                 case Lib.$fEqTermS_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
477679833f1ea120639b8e599bb54302
  $fEqTermS_$c== :: Lib.TermS -> Lib.TermS -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol :: GHC.Read.Read Lib.Symbol
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Symbol
                  Lib.$fReadSymbol_$creadsPrec
                  Lib.$fReadSymbol_$creadList
                  Lib.$fReadSymbol_$creadPrec
                  Lib.$fReadSymbol_$creadListPrec -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lib.Symbol] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Lib.Symbol] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Lib.Symbol
                   Lib.$fReadSymbol2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Lib.Symbol>_R))
                   eta
                   @ b
                   eta1) -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lib.Symbol
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Lib.Symbol
                   Lib.$fReadSymbol3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.Symbol>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Lib.Symbol>_R)))) -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lib.Symbol -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (c :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Lib.Symbol -> Text.ParserCombinators.ReadP.P b) ->
                 case c of wild { GHC.Types.I# x ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 11#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> Lib.$fReadSymbol5 Lib.$fReadSymbol4 @ b eta } }) -}
d56b3a42ca852a5f4b30c3f1d5af56d6
  $fReadSymbol4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11#) -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       (Lib.Symbol -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2, Strictness: <L,A><L,C(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b1
                   (w1 :: Lib.Symbol -> Text.ParserCombinators.ReadP.P b1) ->
                 case Lib.$w$creadPrec @ b1 w1 of ww { Unit# ww1 ->
                 Text.ParserCombinators.ReadP.Look @ b1 ww1 }) -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol6 :: Text.ParserCombinators.ReadP.P [Lib.Symbol]
  {- Unfolding: (GHC.Read.list1
                   @ Lib.Symbol
                   Lib.$fReadSymbol2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Lib.Symbol>_R))
                   GHC.Read.$fRead()5
                   @ [Lib.Symbol]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Lib.Symbol])) -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lib.Symbol]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Lib.Symbol]
                   Lib.$fReadSymbol6) -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lib.Symbol]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadSymbol1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Lib.Symbol]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Lib.Symbol]>_R))) -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lib.Symbol
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadSymbol2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Lib.Symbol>_R)) -}
1a4a7c51ca3c789468935b68851dddcb
  $fReadSymbol_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Lib.Symbol
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Lib.Symbol
                   ((GHC.Read.parens1
                       @ Lib.Symbol
                       Lib.$fReadSymbol3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.Symbol>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Lib.Symbol>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.Symbol>_R)
                      @ Lib.Symbol
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Lib.Symbol))) -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI :: GHC.Read.Read Lib.TermI
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermI
                  Lib.$fReadTermI_$creadsPrec
                  Lib.$fReadTermI_$creadList
                  Lib.$fReadTermI_$creadPrec
                  Lib.$fReadTermI_$creadListPrec -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lib.TermI] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Lib.TermI] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Lib.TermI
                   Lib.$fReadTermI2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Lib.TermI>_R))
                   eta
                   @ b
                   eta1) -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lib.TermI
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Lib.TermI
                   Lib.$fReadTermI3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermI>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Lib.TermI>_R)))) -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lib.TermI -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Lib.TermI -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$w$creadPrec1 ww1 @ b w1 }) -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI4 :: Text.ParserCombinators.ReadP.P [Lib.TermI]
  {- Unfolding: (GHC.Read.list1
                   @ Lib.TermI
                   Lib.$fReadTermI2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Lib.TermI>_R))
                   GHC.Read.$fRead()5
                   @ [Lib.TermI]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Lib.TermI])) -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lib.TermI]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Lib.TermI]
                   Lib.$fReadTermI4) -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lib.TermI]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadTermI1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Lib.TermI]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Lib.TermI]>_R))) -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lib.TermI
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadTermI2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Lib.TermI>_R)) -}
05114d183ea8d376753b1082c2b6d1e3
  $fReadTermI_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Lib.TermI
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Lib.TermI
                   ((GHC.Read.parens1
                       @ Lib.TermI
                       Lib.$fReadTermI3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermI>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Lib.TermI>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermI>_R)
                      @ Lib.TermI
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Lib.TermI))) -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP :: GHC.Read.Read Lib.TermP
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermP
                  Lib.$fReadTermP_$creadsPrec
                  Lib.$fReadTermP_$creadList
                  Lib.$fReadTermP_$creadPrec
                  Lib.$fReadTermP_$creadListPrec -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lib.TermP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Lib.TermP] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Lib.TermP
                   Lib.$fReadTermP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Lib.TermP>_R))
                   eta
                   @ b
                   eta1) -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lib.TermP
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Lib.TermP
                   Lib.$fReadTermP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Lib.TermP>_R)))) -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lib.TermP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP4 :: Text.ParserCombinators.ReadP.P [Lib.TermP]
  {- Unfolding: (GHC.Read.list1
                   @ Lib.TermP
                   Lib.$fReadTermP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Lib.TermP>_R))
                   GHC.Read.$fRead()5
                   @ [Lib.TermP]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Lib.TermP])) -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lib.TermP]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Lib.TermP]
                   Lib.$fReadTermP4) -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lib.TermP]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadTermP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Lib.TermP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Lib.TermP]>_R))) -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lib.TermP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadTermP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Lib.TermP>_R)) -}
b09eada1e179dc4af0a0a61f75291906
  $fReadTermP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Lib.TermP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Lib.TermP
                   ((GHC.Read.parens1
                       @ Lib.TermP
                       Lib.$fReadTermP3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Lib.TermP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermP>_R)
                      @ Lib.TermP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Lib.TermP))) -}
477679833f1ea120639b8e599bb54302
  $fReadTermS :: GHC.Read.Read Lib.TermS
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermS
                  Lib.$fReadTermS_$creadsPrec
                  Lib.$fReadTermS_$creadList
                  Lib.$fReadTermS_$creadPrec
                  Lib.$fReadTermS_$creadListPrec -}
477679833f1ea120639b8e599bb54302
  $fReadTermS1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Lib.TermS] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Lib.TermS] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Lib.TermS
                   Lib.$fReadTermS2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Lib.TermS>_R))
                   eta
                   @ b
                   eta1) -}
477679833f1ea120639b8e599bb54302
  $fReadTermS2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Lib.TermS
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Lib.TermS
                   Lib.$fReadTermS3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermS>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Lib.TermS>_R)))) -}
477679833f1ea120639b8e599bb54302
  $fReadTermS3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Lib.TermS -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Lib.TermS -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$w$creadPrec2 ww1 @ b w1 }) -}
477679833f1ea120639b8e599bb54302
  $fReadTermS4 :: Text.ParserCombinators.ReadP.P [Lib.TermS]
  {- Unfolding: (GHC.Read.list1
                   @ Lib.TermS
                   Lib.$fReadTermS2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <Lib.TermS>_R))
                   GHC.Read.$fRead()5
                   @ [Lib.TermS]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Lib.TermS])) -}
477679833f1ea120639b8e599bb54302
  $fReadTermS_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Lib.TermS]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Lib.TermS]
                   Lib.$fReadTermS4) -}
477679833f1ea120639b8e599bb54302
  $fReadTermS_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Lib.TermS]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadTermS1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <[Lib.TermS]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Lib.TermS]>_R))) -}
477679833f1ea120639b8e599bb54302
  $fReadTermS_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Lib.TermS
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.$fReadTermS2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Lib.TermS>_R)) -}
477679833f1ea120639b8e599bb54302
  $fReadTermS_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Lib.TermS
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Lib.TermS
                   ((GHC.Read.parens1
                       @ Lib.TermS
                       Lib.$fReadTermS3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermS>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Lib.TermS>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Lib.TermS>_R)
                      @ Lib.TermS
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Lib.TermS))) -}
1a4a7c51ca3c789468935b68851dddcb
  $fShowSymbol :: GHC.Show.Show Lib.Symbol
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Symbol
                  Lib.$fShowSymbol_$cshowsPrec
                  Lib.$fShowSymbol_$cshow
                  Lib.$fShowSymbol_$cshowList -}
1a4a7c51ca3c789468935b68851dddcb
  $fShowSymbol1 :: Lib.Symbol -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Symbol) (w1 :: GHC.Base.String) ->
                 Lib.$w$cshowsPrec 0# w w1) -}
507be8585444bd8eb1b65c8a07244730
  $fShowSymbol2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
0f714b5daf278bbed86a151d8668076b
  $fShowSymbol3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unSymbol = "#) -}
1820674c37401b467ff2da758a22bbdf
  $fShowSymbol4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Symbol {"#) -}
1a4a7c51ca3c789468935b68851dddcb
  $fShowSymbol_$cshow :: Lib.Symbol -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Symbol) ->
                 Lib.$fShowSymbol_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1a4a7c51ca3c789468935b68851dddcb
  $fShowSymbol_$cshowList :: [Lib.Symbol] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.Symbol Lib.$fShowSymbol1) -}
1a4a7c51ca3c789468935b68851dddcb
  $fShowSymbol_$cshowsPrec ::
    GHC.Types.Int -> Lib.Symbol -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Symbol)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$w$cshowsPrec ww1 w1 w2 }) -}
05114d183ea8d376753b1082c2b6d1e3
  $fShowTermI :: GHC.Show.Show Lib.TermI
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermI
                  Lib.$fShowTermI_$cshowsPrec
                  Lib.$fShowTermI_$cshow
                  Lib.$fShowTermI_$cshowList -}
05114d183ea8d376753b1082c2b6d1e3
  $fShowTermI1 :: Lib.TermI -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.TermI) (w1 :: GHC.Base.String) ->
                 Lib.$w$cshowsPrec1 0# w w1) -}
05114d183ea8d376753b1082c2b6d1e3
  $fShowTermI_$cshow :: Lib.TermI -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.TermI) ->
                 Lib.$fShowTermI_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
05114d183ea8d376753b1082c2b6d1e3
  $fShowTermI_$cshowList :: [Lib.TermI] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.TermI Lib.$fShowTermI1) -}
05114d183ea8d376753b1082c2b6d1e3
  $fShowTermI_$cshowsPrec ::
    GHC.Types.Int -> Lib.TermI -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.TermI)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$w$cshowsPrec1 ww1 w1 w2 }) -}
b09eada1e179dc4af0a0a61f75291906
  $fShowTermP :: GHC.Show.Show Lib.TermP
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermP
                  Lib.$fShowTermP_$cshowsPrec
                  Lib.$fShowTermP_$cshow
                  Lib.$fShowTermP_$cshowList -}
b09eada1e179dc4af0a0a61f75291906
  $fShowTermP1 :: Lib.TermP -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Lib.$fShowTermP_$cshowsPrec Lib.$fShowTermP2) -}
b5afb0459df0b881befe92c180580e8c
  $fShowTermP2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b09eada1e179dc4af0a0a61f75291906
  $fShowTermP_$cshow :: Lib.TermP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.TermP) ->
                 Lib.$fShowTermP_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b09eada1e179dc4af0a0a61f75291906
  $fShowTermP_$cshowList :: [Lib.TermP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.TermP Lib.$fShowTermP1) -}
b09eada1e179dc4af0a0a61f75291906
  $fShowTermP_$cshowsPrec ::
    GHC.Types.Int -> Lib.TermP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
477679833f1ea120639b8e599bb54302
  $fShowTermS :: GHC.Show.Show Lib.TermS
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.TermS
                  Lib.$fShowTermS_$cshowsPrec
                  Lib.$fShowTermS_$cshow
                  Lib.$fShowTermS_$cshowList -}
477679833f1ea120639b8e599bb54302
  $fShowTermS1 :: Lib.TermS -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.TermS) (w1 :: GHC.Base.String) ->
                 Lib.$w$cshowsPrec2 0# w w1) -}
477679833f1ea120639b8e599bb54302
  $fShowTermS_$cshow :: Lib.TermS -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.TermS) ->
                 Lib.$fShowTermS_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
477679833f1ea120639b8e599bb54302
  $fShowTermS_$cshowList :: [Lib.TermS] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.TermS Lib.$fShowTermS1) -}
477679833f1ea120639b8e599bb54302
  $fShowTermS_$cshowsPrec ::
    GHC.Types.Int -> Lib.TermS -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.TermS)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$w$cshowsPrec2 ww1 w1 w2 }) -}
b96fae4441a240b0965e48ea29190bf7
  $tc'And :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17508160105864809923##
                   10110449181605912869##
                   Lib.$trModule
                   Lib.$tc'And1) -}
228bbf148cd7deddda463d7f14a4c1de
  $tc'And1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'And"#) -}
88537ac75405315956df4ce3aa93c5d6
  $tc'AppI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10556191617787302252##
                   15477236017500790133##
                   Lib.$trModule
                   Lib.$tc'AppI1) -}
36863084f9f6a082dbd1cb8abdff0449
  $tc'AppI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AppI"#) -}
666a460b8fcacac0d4505973f3e04b8d
  $tc'AppS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14636453734799075246##
                   9933742705880671809##
                   Lib.$trModule
                   Lib.$tc'AppS1) -}
e63b3432ce5a2b18a9e2eae092df7b6c
  $tc'AppS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AppS"#) -}
26c596583a0c386770e62ff23ae8270c
  $tc'Boolean :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14535226074865930185##
                   9092659429383849445##
                   Lib.$trModule
                   Lib.$tc'Boolean1) -}
8fd92cf43c85c69c106df5c856b7361a
  $tc'Boolean1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Boolean"#) -}
353e6d2547c57cb474f1c90493bda4e8
  $tc'Cons :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5477267398152535514##
                   2959923448287825411##
                   Lib.$trModule
                   Lib.$tc'Cons1) -}
bdcc938c3de92e66b9880e6fbcdd6ebe
  $tc'Cons1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cons"#) -}
cacc2c8855e0c6f4e9ec1e224faa8cab
  $tc'Divide :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9457083001201598514##
                   13684551777560838020##
                   Lib.$trModule
                   Lib.$tc'Divide1) -}
ab8d36bafd17b3c3adc5729949bcfab3
  $tc'Divide1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Divide"#) -}
c60a7a278e4689fc237bd1dfbde3707c
  $tc'Fst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8193472385443185408##
                   8242618541095142030##
                   Lib.$trModule
                   Lib.$tc'Fst1) -}
fb6d325ca748996f547705ef9c6f6c9e
  $tc'Fst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fst"#) -}
164a762ff9ac0102b32768be599f6c07
  $tc'Head :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11423232563753197137##
                   12585377175209831745##
                   Lib.$trModule
                   Lib.$tc'Head1) -}
59994486f5952f1668d0ea03325aa1ba
  $tc'Head1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Head"#) -}
b9cd0d8f911acd2657f3dc95ea95ca74
  $tc'Iff :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2762095681588731636##
                   2199322700056077665##
                   Lib.$trModule
                   Lib.$tc'Iff1) -}
8dd00457fba4ecf7098d26a503f70b15
  $tc'Iff1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Iff"#) -}
dc8a748f7407c64c455724a01aef8702
  $tc'IsNil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13285968911606255466##
                   1462027287962737296##
                   Lib.$trModule
                   Lib.$tc'IsNil1) -}
8f287cecd5583680288907d6daefcece
  $tc'IsNil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IsNil"#) -}
30005fcb859854be5ce53547d5279e84
  $tc'LamI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13728026789994561834##
                   18129917903594384871##
                   Lib.$trModule
                   Lib.$tc'LamI1) -}
d15d0e56d0d6c04c66f6772e4df2b023
  $tc'LamI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LamI"#) -}
07d287d761faca8d15f737e910d90ce7
  $tc'LamS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11486724383741493263##
                   5367659612560747792##
                   Lib.$trModule
                   Lib.$tc'LamS1) -}
9f31f9899bc92c855123f7bbc0fc5855
  $tc'LamS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LamS"#) -}
d23353d362d4dc8040089d9cd2059de9
  $tc'Minus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11316423203820729368##
                   15725524008988205768##
                   Lib.$trModule
                   Lib.$tc'Minus1) -}
b02f80ce9e153840404736ad75d5a4dc
  $tc'Minus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Minus"#) -}
2ad111bfddafffe8e6ea3db05632573d
  $tc'Mult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5137056919616273101##
                   7970605091783289459##
                   Lib.$trModule
                   Lib.$tc'Mult1) -}
a8ba82a6d6faac7dc40f0163805dd13d
  $tc'Mult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mult"#) -}
341915cbaf33a11ee05486cfbd130a25
  $tc'Natural :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16399545822090924967##
                   1085797849751649352##
                   Lib.$trModule
                   Lib.$tc'Natural1) -}
fcd822ab7b663583856fccef06f62e2b
  $tc'Natural1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Natural"#) -}
77c225ddb9a8a1c67a7f7969c8550522
  $tc'Nil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   122109539311722373##
                   11554763951607889314##
                   Lib.$trModule
                   Lib.$tc'Nil1) -}
31a54a543f03ee28667d2888d66ea58c
  $tc'Nil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nil"#) -}
7869e7bb1b63d1022c0a78111da7a4a1
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6966690370627853238##
                   13611617246153455937##
                   Lib.$trModule
                   Lib.$tc'Not1) -}
3e790d25d1f915d9b5659c665988d053
  $tc'Not1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Not"#) -}
00c36834fb002fcabdbe30fdeb8903f0
  $tc'Or :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17207158259181667732##
                   266931163812186943##
                   Lib.$trModule
                   Lib.$tc'Or1) -}
714f1709f845ab52b14813fefef68729
  $tc'Or1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Or"#) -}
5cac39ad7929d22d0fbbea50e48d93ad
  $tc'Pair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12008471021030096734##
                   3299986681158993720##
                   Lib.$trModule
                   Lib.$tc'Pair1) -}
72dbbf8ab84939e897d2452d481326b1
  $tc'Pair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pair"#) -}
c5e43c2a09e004c11b43724d9fa402a7
  $tc'Plus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7840095454251573097##
                   10319616559328993692##
                   Lib.$trModule
                   Lib.$tc'Plus1) -}
273927ca2fbaca95b1be1a0b78873b9f
  $tc'Plus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Plus"#) -}
94526b87c126133516a6e105424625d9
  $tc'Snd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16965563965139526275##
                   12117710435431729161##
                   Lib.$trModule
                   Lib.$tc'Snd1) -}
f883b40944d93dbc678b07373bc60703
  $tc'Snd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Snd"#) -}
6049bb9430397b802f9503aa8153910e
  $tc'SymI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8986532735444022412##
                   13721292888688785420##
                   Lib.$trModule
                   Lib.$tc'SymI1) -}
99018c4743cd0aff417cc497cba9496d
  $tc'SymI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SymI"#) -}
cee710f81ffeca1d18e14a995f799a1a
  $tc'SymS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3453473488219716081##
                   9548155814595583713##
                   Lib.$trModule
                   Lib.$tc'SymS1) -}
ff0c3c4098f1cc1acbfd9554672a33ed
  $tc'SymS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SymS"#) -}
6c0c5f1804806c83c5ac2a5fe45846eb
  $tc'Symbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1091398863038583436##
                   14316593089760889885##
                   Lib.$trModule
                   Lib.$tc'Symbol1) -}
48d03f548be60fd10c4c7271f1934e9d
  $tc'Symbol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Symbol"#) -}
f4d7e4d955441bdb806d2756a8ec1804
  $tc'Tail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7290118835510955385##
                   6406971556308226845##
                   Lib.$trModule
                   Lib.$tc'Tail1) -}
62dc08687a977a83a2846fd4464cc587
  $tc'Tail1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tail"#) -}
9c92964ec996d080d75a884db76877e3
  $tc'TermP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7573429642549551381##
                   8050674001036488300##
                   Lib.$trModule
                   Lib.$tc'TermP1) -}
15396733a486a2c69e1e797478a2b675
  $tc'TermP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TermP"#) -}
2b68d95f3a0711863cdf456f601e9014
  $tc'Y :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16303681341274969385##
                   917362316240276218##
                   Lib.$trModule
                   Lib.$tc'Y1) -}
fe14f84f9a015293c58f8873ee3185c6
  $tc'Y1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Y"#) -}
8fd3fb9549fdae1400bf6981724c46e8
  $tcSymbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16465637719786329583##
                   11580215184296062770##
                   Lib.$trModule
                   Lib.$tcSymbol1) -}
1c0a6afed631c0788f8e4a31a04b2acb
  $tcSymbol1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Symbol"#) -}
faf31165d2612cd23e9beb4848af8e0f
  $tcTermI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16996457594306670163##
                   3589551309429228307##
                   Lib.$trModule
                   Lib.$tcTermI1) -}
dedb8be5d793577baf77b75d4a091a51
  $tcTermI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TermI"#) -}
9dbcc4cfaeaf461be91422e43d0f941e
  $tcTermP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10158823097296172322##
                   9972671589053276846##
                   Lib.$trModule
                   Lib.$tcTermP1) -}
16dc28988ff5fc5c21712c53cf7295b6
  $tcTermP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TermP"#) -}
e80f86d06fad59cde2de76b086e3bc31
  $tcTermS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8275683904806494464##
                   2414481897621058814##
                   Lib.$trModule
                   Lib.$tcTermS1) -}
17804d74e5f932606ba6114fb96b3215
  $tcTermS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TermS"#) -}
f6464ea73f5e0ac1d0318fe109cab54d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
aa7e418525c71b85f4b8b023455e2672
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
1abb378d9400c7577d35fd1d0e59fca8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "lambda-calculus-0.1.0.0-71ACHzEMgLIBMHG57ZzwZM"#) -}
1a4a7c51ca3c789468935b68851dddcb
  $w$creadPrec ::
    (Lib.Symbol -> Text.ParserCombinators.ReadP.P b1)
    -> (# GHC.Base.String -> Text.ParserCombinators.ReadP.P b1 #)
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
05114d183ea8d376753b1082c2b6d1e3
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (Lib.TermI -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
477679833f1ea120639b8e599bb54302
  $w$creadPrec2 ::
    GHC.Prim.Int#
    -> forall b.
       (Lib.TermS -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
1a4a7c51ca3c789468935b68851dddcb
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Lib.Symbol -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Lib.Symbol)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Lib.$fShowSymbol4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Lib.$fShowSymbol3
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows6
                             (GHC.Show.showLitString
                                w `cast` (Lib.N:Symbol[0])
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows6
                                   (GHC.Base.++ @ GHC.Types.Char Lib.$fShowSymbol2 x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w1
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)) }) -}
05114d183ea8d376753b1082c2b6d1e3
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Lib.TermI -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
477679833f1ea120639b8e599bb54302
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> Lib.TermS -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
46e00a23c224c1a351df5bce49b24d2e
  $wlastUnf :: GHC.Prim.Int# -> (a -> GHC.Base.Maybe a) -> a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U>,
     Inline: [0] -}
9f38a79d44165ebf31a844a718861bfe
  $wstaticDistance ::
    Lib.Symbol -> [Lib.Symbol] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,U>,
     Inline: [0] -}
1a4a7c51ca3c789468935b68851dddcb
  newtype Symbol = Symbol {unSymbol :: GHC.Base.String}
05114d183ea8d376753b1082c2b6d1e3
  data TermI
    = SymI GHC.Types.Int | LamI Lib.TermI | AppI Lib.TermI Lib.TermI
b09eada1e179dc4af0a0a61f75291906
  data TermP
    = TermP Lib.TermS
    | Boolean GHC.Types.Bool
    | Iff Lib.TermP Lib.TermP Lib.TermP
    | Not Lib.TermP
    | And Lib.TermP Lib.TermP
    | Or Lib.TermP Lib.TermP
    | Natural GHC.Types.Int
    | Plus Lib.TermP Lib.TermP
    | Mult Lib.TermP Lib.TermP
    | Minus Lib.TermP Lib.TermP
    | Divide Lib.TermP Lib.TermP
    | Y Lib.TermP
    | Pair Lib.TermP Lib.TermP
    | Fst Lib.TermP
    | Snd Lib.TermP
    | Cons Lib.TermP Lib.TermP
    | Nil
    | IsNil Lib.TermP
    | Head Lib.TermP
    | Tail Lib.TermP
477679833f1ea120639b8e599bb54302
  data TermS
    = SymS Lib.Symbol
    | LamS Lib.Symbol Lib.TermS
    | AppS Lib.TermS Lib.TermS
6abc8d55c65d3fe6794f43780f05e2a9
  app :: Lib.TermS -> Lib.TermS -> Lib.TermS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True) Lib.AppS -}
7c1821f7f0f8a4d6fba5c7cdabc13ea4
  betaI :: Lib.TermI -> GHC.Base.Maybe Lib.TermI
  {- Arity: 1, Strictness: <S,1*U> -}
ac097fcf1e16a65ae4874bd6f54d22bb
  doApp :: Lib.TermI -> Lib.TermI -> Lib.TermI
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (t1 :: Lib.TermI) (t2 :: Lib.TermI) ->
                 Lib.doApp' t1 t2 Lib.$fShowTermP2) -}
9b36de03d8b17f25b2b23a4a14a355d6
  doApp' :: Lib.TermI -> Lib.TermI -> GHC.Types.Int -> Lib.TermI
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U(U)> -}
6e08c6152ae79ad4e9b3280d4f116fbb
  full ::
    (Lib.TermS -> a) -> (a -> GHC.Base.Maybe a) -> Lib.TermS -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,C(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (a1 :: Lib.TermS -> a)
                   (b :: a -> GHC.Base.Maybe a)
                   (term :: Lib.TermS) ->
                 Lib.full_lastUnf @ a Lib.full1 b (a1 term)) -}
d8eedcc4440001ec7ba3171083f32b59
  full1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10000#) -}
3ea42d180bccdb8b4c0d33ecc5614f8e
  full_lastUnf :: GHC.Types.Int -> (a -> GHC.Base.Maybe a) -> a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><L,C(U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: a -> GHC.Base.Maybe a)
                   (w2 :: a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$wlastUnf @ a ww1 w1 w2 }) -}
9f7f20b711e3d4635e4910d105e24013
  lam :: GHC.Base.String -> Lib.TermS -> Lib.TermS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Lib.LamS
                  `cast`
                (Lib.N:Symbol[0] ->_R <Lib.TermS -> Lib.TermS>_R) -}
221e9fe6a4a83fa8ebb0a26d114fe6ae
  recalcDistances ::
    Lib.TermI -> GHC.Types.Int -> GHC.Types.Int -> Lib.TermI
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U(U)><L,U(U)> -}
aef0174b6cf02bccc6bf706cfd8dc1be
  solve :: Lib.TermP -> Data.Either.Either Lib.TermI Lib.TermS
  {- Arity: 1, Strictness: <L,1*U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.TermP) ->
                 Data.Either.Left
                   @ Lib.TermI
                   @ Lib.TermS
                   (Lib.$wlastUnf
                      @ Lib.TermI
                      10000#
                      Lib.betaI
                      (case w of wild {
                         DEFAULT -> case Lib.solve1 ret_ty Lib.TermI of {}
                         Lib.TermP term
                         -> Lib.toTermI' term (GHC.Types.[] @ Lib.Symbol) }))) -}
b161d7c258bc2a8e8ad6efef2452bea4
  solve1 :: Lib.TermS
  {- Strictness: x -}
3ea793b1d1a8581cdc40a27f8c7c5470
  staticDistance ::
    Lib.Symbol -> [Lib.Symbol] -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Lib.Symbol) (w1 :: [Lib.Symbol]) (w2 :: GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case Lib.$wstaticDistance w w1 ww1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
43d473af1ee98ca765ab0ae4c9457cca
  sym :: GHC.Base.String -> Lib.TermS
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True)
                Lib.SymS `cast` (Lib.N:Symbol[0] ->_R <Lib.TermS>_R) -}
4192cc8c093df38df292dd7babcfa89e
  toTermI :: Lib.TermS -> Lib.TermI
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (term :: Lib.TermS) ->
                 Lib.toTermI' term (GHC.Types.[] @ Lib.Symbol)) -}
f81dbcc7bd500506a957d036ef312fb3
  toTermI' :: Lib.TermS -> [Lib.Symbol] -> Lib.TermI
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
33939b8b6f0165494f04c5d36b160125
  toTermS :: Lib.TermP -> Lib.TermS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.TermP) ->
                 case ds of wild {
                   DEFAULT -> Lib.solve1 Lib.TermP term -> term }) -}
4ff5b132ab29a7d219971364ba5aa08e
  unSymbol :: Lib.Symbol -> GHC.Base.String
  RecSel Left Lib.Symbol
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lib.unSymbol1 `cast` (<Lib.Symbol>_R ->_R Lib.N:Symbol[0]) -}
e981a008469c37a3491f2a9598b784d3
  unSymbol1 :: Lib.Symbol -> Lib.Symbol
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Lib.Symbol) -> ds) -}
instance [safe] GHC.Classes.Eq [Lib.Symbol] = Lib.$fEqSymbol
instance [safe] GHC.Classes.Eq [Lib.TermI] = Lib.$fEqTermI
instance [safe] GHC.Classes.Eq [Lib.TermP] = Lib.$fEqTermP
instance [safe] GHC.Classes.Eq [Lib.TermS] = Lib.$fEqTermS
instance [safe] GHC.Read.Read [Lib.Symbol] = Lib.$fReadSymbol
instance [safe] GHC.Read.Read [Lib.TermI] = Lib.$fReadTermI
instance [safe] GHC.Read.Read [Lib.TermP] = Lib.$fReadTermP
instance [safe] GHC.Read.Read [Lib.TermS] = Lib.$fReadTermS
instance [safe] GHC.Show.Show [Lib.Symbol] = Lib.$fShowSymbol
instance [safe] GHC.Show.Show [Lib.TermI] = Lib.$fShowTermI
instance [safe] GHC.Show.Show [Lib.TermP] = Lib.$fShowTermP
instance [safe] GHC.Show.Show [Lib.TermS] = Lib.$fShowTermS
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

